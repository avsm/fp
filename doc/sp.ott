metavar field, x, y     ::= {{ lex alphanum }} {{ com field label }}

metavar integer_literal, i ::=   {{ lex numeral }} {{ com Literal integers }}

metavar alignment, current_alignment    ::=   {{ lex alphanum }} {{ com Alignment expression }}

grammar

kind, K :: '' ::=                               {{ com Kinds }}
 | T                        ::  :: base_type    {{ com Base types }}
 | Sigma -> T               ::  :: array_type   {{ com Array types }}  {{ tex \sigma\rightarrow [[T]] }}
 | Struct                   ::  :: struct_type  {{ com Struct types }}

sigma {{ tex \sigma }} :: '' ::=                {{ com Expression types }}
 | int                      ::  :: host_int
 | bool                     ::  :: host_bool
 | sigma1 -> sigma2         ::  :: host_function
 | T ( tau )                ::  :: host_type_rep

base, b :: '' ::=                               {{ com Base types }}
 | bit                      ::  :: bit
 | byte                     ::  :: byte
 | int16                    ::  :: int16
 | int32                    ::  :: int32
 | int64                    ::  :: int64

tau {{ tex \tau }} :: '' ::=                    {{ com Type expressions }}
 | b                        ::  :: base
 | b [ e ]                  ::  :: array
 | struct { D ;; V }        ::  :: struct

exp, e :: '' ::=                                {{ com Expressions }}
 | integer_literal          ::  :: integer
 | x                        ::  :: field_ref
 | e1 + e2                  ::  :: addition
 | e1 - e2                  ::  :: subtraction
 | e1 * e2                  ::  :: multiplication
 | e1 / e2                  ::  :: division
 | ( e )                    ::  :: grouping
 | sizeof x                 ::  :: sizeof
 | offset x                 ::  :: offset
 | num_set_bits x           ::  :: num_set_bits
 | remaining ()             ::  :: remaining

D :: '' ::=                                     {{ com Declarations }}
 |                          ::  :: nil_decl
 | F ; D                    ::  :: cons_decl

F :: '' ::=                                     {{ com Labeled Fields }}
 | align e                       ::  :: alignment
 | x : tau                       ::  :: field
 | x : classify (x) { cases }    ::  :: classify
 | x : array (exp) { D ;; V }    ::  :: struct_array

cases :: '' ::=                                 {{ com Classification trees }}
 |                          ::  :: nil_case
 | case cases               ::  :: cons_case

case, c :: '' ::=                               {{ com Classification cases }}
 | exp : name -> { D ;; V } ::  :: case

V :: '' ::=                                     {{ com Value specifications }}
 | x : value_exp            ::  :: value_exp

value_exp :: '' ::=                             {{ com Value expressions }}
 | e                        ::  :: expr
 | path                     ::  :: qualified_field

path, p :: '' ::=                               {{ com Path expressions }}
 | x                        ::  :: path_root
 | path . x                 ::  :: dot_path

E :: '' ::=                                     {{ com Typing contexts }}
 |                          ::  :: env_nil
 | E ; x : tau              ::  :: env_cons
 | E1 ; x : tau ; E2        ::  :: env_append

terminals :: '' ::=                             {{ com Syntax terminals }}
 | ->                       ::  :: rarrow       {{ tex \rightarrow }}
 | |-                       ::  :: vdash        {{ tex \vdash }}

align_expr, a :: '' ::=                         {{ com Alignment expressions }}
 | current_alignment        ::  :: align_var
 | integer_literal          ::  :: align_const
 | ( exp )                  ::  :: align_exp
 | a1 + a2                  ::  :: align_plus
 | a1 * a2                  ::  :: align_multiple
 | const_fold ( exp )       ::  :: const_fold

formula :: formula_ ::=
 | judgement                ::  :: judgement
 | x not in dom ( E )       ::  :: notindomE    {{ tex [[x]]\not\in dom([[E]]) }}
 | a                        ::  :: current_alignment
 | a '%' i1 = i2            ::  :: alignment_boundary

defns
Type_checked_parsing :: '' ::=

defn

E |- e : sigma              ::  :: exp_typing :: 'exp_typing_' by

--------------------------  :: int
E |- integer_literal : int

--------------------------  :: var
E1; x : tau ; E2 |- x : T(tau)

E |- e1 : int
E |- e2 : int
--------------------------  :: addition
E |- e1 + e2 : int

E |- e1 : int
E |- e2 : int
--------------------------  :: subtraction
E |- e1 - e2 : int

E |- e1 : int
E |- e2 : int
--------------------------  :: multiplication
E |- e1 * e2 : int

E |- e1 : int
E |- e2 : int
--------------------------  :: division
E |- e1 / e2 : int

E |- e : sigma
--------------------------  :: grouping
E |- (e) : sigma

--------------------------  :: sizeof
E |- sizeof x  : int

--------------------------  :: offset
E |- offset x  : int

--------------------------  :: num_set_bits
E |- num_set_bits x  : int

--------------------------  :: remaining
E |- remaining ()  : int

defn

E , a |- tau : K , a'       ::  :: typing :: 'typing_' by

--------------------------  :: bit
E , a |- bit : T , a + 1

a % 8 = 0
--------------------------  :: byte
E , a |- byte : T , a + 8

a % 8 = 0
--------------------------  :: int16
E , a |- int16 : T , a + 16

a % 8 = 0
--------------------------  :: int32
E , a |- int32 : T , a + 32

a % 8 = 0
--------------------------  :: int64
E , a |- int64 : T , a + 64

E |- e : int
--------------------------  :: bit_vector
E, a |- bit[e] : Sigma -> T , a + (e)

a % 8 = 0
E |- e : int
--------------------------  :: byte_vector
E, a |- byte[e] : Sigma -> T , a + 8*(e)

a % 8 = 0
E |- e : int
--------------------------  :: int16_vector
E, a |- int16[e] : Sigma -> T , a + 16*(e)

a % 8 = 0
E |- e : int
--------------------------  :: int32_vector
E, a |- int32[e] : Sigma -> T , a + 32*(e)

a % 8 = 0
E |- e : int
--------------------------  :: int64_vector
E, a |- int64[e] : Sigma -> T , a + 64*(e)

defn

E , a |- D , E' , a'        ::  :: decls_typing :: 'decls_typing_' by

--------------------------  :: nil
E , a |- , E , a

E , a |- F , E' , a'
E' , a' |- D , E'' , a''
--------------------------  :: cons
E , a |- F ; D , E'' , a''


defn

E , a |- F , E' , a'        ::  :: field_typing :: 'field_typing_' by

const_fold ( e ) % 8 = 0
--------------------------  :: alignment
E , a |- align e , E , const_fold ( e )

x not in dom(E)
E , a |- tau : K , a'
--------------------------  :: field
E , a |- x : tau , E ; x : tau , a'

