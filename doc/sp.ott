metavar field, x, y, name, n            ::= {{ lex alphanum }} {{ com field label }}

metavar integer_literal, i              ::= {{ lex numeral }}  {{ com Literal integers }}

metavar alignment, current_alignment    ::= {{ lex alphanum }} {{ com Alignment expression }}

metavar value, v                        ::= {{ lex numeral }}  {{ com Constant values }}

indexvar index, j, k                    ::= {{ lex numeral }}  {{ com Indices }}

grammar

% Kinds of types.  Vectors and arrays are treated separately, since we
% don't have arrays of classifications (i.e. Sigma -> Map).
kind, K :: '' ::=                               {{ com Kinds }}
 | T                                ::  :: base_type    {{ com Base types }}
 | Sigma -> T                       ::  :: vectors      {{ com Vector types }}  {{ tex \sigma\rightarrow [[T]] }}
 | Struct                           ::  :: struct_type  {{ com Struct types }}
 | Sigma -> Struct                  ::  :: array        {{ com Array types }}   {{ tex \sigma\rightarrow [[Struct]] }}
 | Map                              ::  :: map          {{ com Cases types }}

% Primitive types.
base, b :: '' ::=                               {{ com Base types }}
 | bit                      ::  :: bit
 | byte                     ::  :: byte
 | int16                    ::  :: int16
 | int32                    ::  :: int32
 | int64                    ::  :: int64

% These are expressions that are used to specify vector-lengths, and a
% slight extension of these expressions will be used to specify value
% specifications.
exp, e :: '' ::=                                {{ com Expressions }}
 | integer_literal          ::  :: integer
 | x                        ::  :: field_ref
 | e1 + e2                  ::  :: addition
 | e1 - e2                  ::  :: subtraction
 | e1 * e2                  ::  :: multiplication
 | e1 / e2                  ::  :: division
 | ( e )                    ::  :: grouping
 | sizeof x                 ::  :: sizeof
 | offset x                 ::  :: offset
 | num_set_bits x           ::  :: num_set_bits
 | remaining ()             ::  :: remaining

% Note that this definition allows fields inside structs to have
% struct types.  Also, the value expressions for fields are seperated
% out into a separate syntactic rule, and appear in a struct after
% field declarations.  This has been done to ease the typing
% specification, since the environment for the value expressions
% includes _all_ the fields in the enclosing struct, including fields
% that lexically come later in the actual language.
tau {{ tex \tau }} :: '' ::=                    {{ com Type expressions }}
 | b                            ::  :: base
 | b [ e ]                      ::  :: vector
 | struct { D ;; VD }           ::  :: struct
 | </ vj , nj , tauj // j />    ::  :: cases_struct
 | ( e , tau )                  ::  :: array_struct

% A sequence of field and alignment declarations.
D :: '' ::=                                     {{ com Declarations }}
 |                          ::  :: nil_decl
 | F ; D                    ::  :: cons_decl

% A field or alignment declaration.
F :: '' ::=                                     {{ com Labeled Fields }}
 | align e                              ::  :: alignment
 | x : label                            ::  :: label
 | x : tau                              ::  :: field
 | x : array ( e ) { D ;; VD }          ::  :: struct_array
 | x : classify ( y ) { cases }         ::  :: classify

cases :: '' ::=                                 {{ com Classification trees }}
 | </ ej : nj -> { Dj ;; VDj } // j />  ::  :: cases

% The value declarations are unordered, so we should use a list form.
% This ensures that we use the same environment for each decl, and
% also enables us to define one less typing production.  However, Ott
% had issues with the way I attempted it ...
VD :: '' ::=                                    {{ com Value declarations }}
 | </ Vj // j />            ::  :: value_decls

V :: '' ::=                                     {{ com Value specifications }}
 | x : value_exp            ::  :: value_decl

% The path syntax allows value expressions to refer to fields within
% classification trees.
value_exp, ve :: '' ::=                         {{ com Value expressions }}
 | e                        ::  :: expr
 | path                     ::  :: qualified_field
 | sizeof path              ::  :: path_sizeof
 | offset path              ::  :: path_offset
 | num_set_bits path        ::  :: path_num_set_bits

path, p :: '' ::=                               {{ com Path expressions }}
 | x                        ::  :: path_leaf
 | path [ n ] . x           ::  :: dot_path

E :: '' ::=                                     {{ com Typing environments }}
 |                          ::  :: env_nil
 | path : tau               ::  :: env_cons
 | path : label             ::  :: env_label
 | E1 ; E2                  ::  :: env_append
 | E1 \ E2                  ::  :: env_subtract

% Sets containing field and label names.

S, L :: '' ::=					{{ com Label and name sets }}
 | Empty                     ::  :: nil		{{ com Empty set }}		{{ tex \empty }}
 | S + x                     ::  :: set_union	{{ com Set union }}		{{ tex [[S]] \cup {[[x]]} }}

% The ( exp ) production is purely a mechanism to inject expressions
% as alignments, without disambiguation.  const_fold is a function
% that is defined when exp can be constant-folded into a constant, and
% is not defined otherwise.
align_expr, a :: '' ::=                         {{ com Alignment expressions }}
 | current_alignment        ::  :: align_var
 | integer_literal          ::  :: align_const
 | ( exp )                  ::  :: align_exp
 | a1 + a2                  ::  :: align_plus
 | a1 * a2                  ::  :: align_multiple
 | const_fold ( exp )       ::  :: align_const_fold
 | sizeof ( tau )           ::  :: align_sizeof

formula :: formula_ ::=
 | judgement                    ::  :: judgement
 | </ formulaj // j />          ::  :: formula_list
 | E ; x : tau ; E'             ::  :: env
 | path in S                    ::  :: in_S             {{ tex [[x]]\not\in [[S]] }}
 | path not in S                ::  :: not_in_S         {{ tex [[x]]\not\in [[S]] }}
 | x : tau in fields ( tau' )   ::  :: in_fields_tau    {{ tex [[x]] [[:]] [[tau]] \in fields([[tau']]) }}
 | n in </ nj // j />           ::  :: in_keys          {{ tex [[n]] \in { [[n]]_j } }}
 | E ( path ) = label           ::  :: label_in_E
 | a                            ::  :: current_alignment
 | a '%' i1 = i2                ::  :: alignment_boundary
 | a < a'                       ::  :: alignment_compare
 | v = a                        ::  :: alignment_equal
 | T_to_int ( tau )             ::  :: type_cast_to_int
 | T_from_int ( tau )           ::  :: type_cast_from_int
 | distinct ( </ nj // j /> )   ::  :: distinct_names

terminals :: '' ::=                             {{ com Syntax terminals }}
 | ->                       ::  :: rarrow       {{ tex \rightarrow }}
 | |-                       ::  :: vdash        {{ tex \vdash }}

defns
Type_checked_parsing :: '' ::=

% Environment lookup for variables and paths.

defn
E ( path ) = tau     ::  :: typing_context :: 'typing_context_' by

E1 ; x : tau ; E2
--------------------------  :: var
E ( x ) = tau

E ( path ) = </ vj , nj , tauj // j />
n in </ nj // j />
x : tau in fields ( tauj )
--------------------------  :: path
E ( path [ n ] . x ) = tau

% Rules to type length expressions.
%
% Expression typing is used for vector and array length expressions,
% and value specifiers.  In the former case, we are interested if the
% expression can be typed as an integer.  In the latter case, we are
% interested if the value expression can be typed with the type
% carried by the field.
%
% Although array expressions and value expressions have been
% differentiated syntactically above (to handle paths in value
% expressions), they will be typed using the same typing relation, and
% the difference between the two is implemented in the typing relation
% for V (field_value_typing).

defn
E |- value_exp : int ::  :: array_size_typing :: 'array_size_typing_' by

--------------------------  :: int
E |- integer_literal : int

% We handle bit-vectors specially, and the generic case below: they
% can be converted into integers if their length is a constant and
% less then a limit.
E ( path ) = bit [ e ]
const_fold ( e ) < 32
--------------------------  :: var_bit_vector
E |- path : int

% This is the more generic case.
E ( path ) = tau
T_to_int ( tau )
--------------------------  :: var
E |- path : int

E |- e1 : int
E |- e2 : int
--------------------------  :: addition
E |- e1 + e2 : int

E |- e1 : int
E |- e2 : int
--------------------------  :: subtraction
E |- e1 - e2 : int

E |- e1 : int
E |- e2 : int
--------------------------  :: multiplication
E |- e1 * e2 : int

E |- e1 : int
E |- e2 : int
--------------------------  :: division
E |- e1 / e2 : int

E |- e : int
--------------------------  :: grouping
E |- (e) : int

E ( path ) = tau
--------------------------  :: sizeof
E |- sizeof path  : int

E ( path ) = tau
--------------------------  :: offset
E |- offset path  : int

E ( path ) = label
--------------------------  :: offset_label
E |- offset path  : int

E ( path ) = tau
--------------------------  :: num_set_bits
E |- num_set_bits path  : int

--------------------------  :: remaining
E |- remaining ()  : int

% Rules to ensure that type expressions are well-kinded.  We also
% thread an alignment offset 'a' through the rules, since type
% expressions are only well-kinded only at certain alignments.
% Specifically, non-bit-oriented types are only well-kinded at byte
% offsets.  Hence, all byte-aligned offsets are equivalent to offset
% 0.

defn
E , a |- tau : K , a'       ::  :: kinding :: 'kinding_' by

--------------------------  :: bit
E , a |- bit : T , a + 1

E |- e : int
--------------------------  :: bit_vector
E, a |- bit[e] : Sigma -> T , a + (e)

% All non-bit types are required to be byte-aligned.

a % 8 = 0
--------------------------  :: byte
E , a |- byte : T , 0

a % 8 = 0
--------------------------  :: int16
E , a |- int16 : T , 0

a % 8 = 0
--------------------------  :: int32
E , a |- int32 : T , 0

a % 8 = 0
--------------------------  :: int64
E , a |- int64 : T , 0

a % 8 = 0
E |- e : int
--------------------------  :: byte_vector
E, a |- byte[e] : Sigma -> T , 0

a % 8 = 0
E |- e : int
--------------------------  :: int16_vector
E, a |- int16[e] : Sigma -> T , 0

a % 8 = 0
E |- e : int
--------------------------  :: int32_vector
E, a |- int32[e] : Sigma -> T , 0

a % 8 = 0
E |- e : int
--------------------------  :: int64_vector
E, a |- int64[e] : Sigma -> T , 0

a % 8 = 0
--------------------------  :: struct
E, a |- struct { D ;; VD } : Struct, 0

a % 8 = 0
--------------------------  :: array
E, a |- ( e, tau ) : Sigma -> Struct, 0

% For cases, we need to check that each case branch will leave the
% subsequent fields suitably aligned.
a % 8 = 0
</ E, a |- tauj : Kj , aj // j />
</ aj % 8 = 0 // j />
--------------------------  :: cases
E, a |- </ vj , nj , tauj // j /> : Map, 0

% TODO:
%
% This rule type checks a top-level struct.  Note that the environment
% threading in this rule adds the fields in the struct to the
% environment without any qualification.  This will be rectified for
% nested structs, below.  Also, note that the environment used to type
% VD is the one computed after typing D.
% E , a |- D , E' , a'
% E' |- VD
% --------------------------  :: named_struct
% E , a |- struct n { D ;; VD } : Struct, a'

% There is no rule for typing an unamed array struct, since this will
% never appear in the source syntax.


% Rules to process a sequence of field and alignment declarations.
% Since field and label names cannot conflict, and since there cannot
% be duplicate field or label names, we thread a set of current names
% through the rules.

defn
E , a , S |- D , E' , a' , S'	::  :: decls_typing :: 'decls_typing_' by

% That's not a typo: it's the null decl!
--------------------------  :: nil
E , a , S |- , E , a , S

E  , a ,  S  |- F , E'  , a'  , S'
E' , a' , S' |- D , E'' , a'' , S''
--------------------------  :: decl_cons
E , a , S    |- F ; D , E'' , a'' , S''

% Rules to process a single field or alignment declaration.  Alignment
% declarations update the bit alignment, and field declarations add to
% the environment as well as update the bit alignment, and so each
% rule will output a possibly modified environment and an updated bit
% alignment.  We also thread a set of field and label names to check
% for conflicts.

defn
E , a , S |- F , E' , a' , S'	::  :: field_typing :: 'field_typing_' by

% We only support constant expressions for alignment values, and only
% support alignment at byte boundaries.
const_fold ( e ) % 8 = 0
--------------------------  :: alignment
E , a , S |- align e , E , 0 , S

% A label is simply added to the environment as a label; in
% particular, the current alignment is unchanged.  We support labels
% only at byte boundaries.

a % 8 = 0
x not in S
--------------------------  :: label
E , a , S |- x : label , E ; x : label , 0 , S + x

% We don't have a single rule for x : tau, but instead seperate out
% the rules for the top level cases of tau.  This is to specially
% handle the case where tau is a struct.

x not in S
E , a |- b : K , a'
--------------------------  :: base
E , a , S |- x : b , E ; x : b , a' , S + x

x not in S
E , a |- b [ e ] : K , a'
--------------------------  :: vector
E , a , S |- x : b [ e ] , E ; x : b [ e ] , a' , S + x

% The array needs to start and end on a byte-boundary.
x not in S
a % 8 = 0
E |- e : int
E , 0 , Empty |- D , E' , a' , S'
( e ) * a' % 8 = 0
E' |- VD
--------------------------  :: array
E , a , S |- x : array ( e ) { D ;; VD } , E ; x : ( e , struct { D ;; VD } ) , 0 , S + x

% The field y should not be a label.  The root of the classification
% tree should be byte-aligned, and each path in the classification
% tree should end on a byte-aligned boundary.
x not in S
a % 8 = 0
E ( y ) = tau
distinct ( </ nj // j /> )
vj = const_fold ( ej )
</ E , 0 , Empty |- Dj , Ej , aj , Sj // j />
aj % 8 = 0
</ Ej |- VDj // j />
--------------------------  :: classify
E , a , S |- x : classify ( y ) { </ ej : nj -> { Dj ;; VDj } // j /> } , E ; x : </ vj , nj , struct { Dj ;; VDj } // j /> , 0 , S + x

defn
E |- VD                     ::  :: field_values_typing :: '' by

</ E |- Vj // j />
--------------------------  :: field_values_typing
E |- </ Vj // j />

defn
E |- V                      ::  :: field_value_typing :: '' by

E ( x ) = tau
E |- value_exp : int
T_from_int ( tau )
--------------------------  :: field_value_typing
E |- x : value_exp
