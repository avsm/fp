metavar field, x, y     ::= {{ lex alphanum }} {{ com field label }}

metavar integer_literal ::=   {{ lex numeral }} {{ com Literal integers }}

metavar alignment, current_alignment    ::=   {{ lex alphanum }} {{ com Alignment expression }}

grammar

kind, K :: '' ::=                               {{ com Kinds }}
 | T                        ::  :: base_type    {{ com Base types }}
 | Sigma -> T               ::  :: array_type   {{ com Array types }}
 | Struct                   ::  :: struct_type  {{ com Struct types }}

base, b :: '' ::=                               {{ com Base types }}
 | bit                      ::  :: bit
 | byte                     ::  :: byte
 | int16                    ::  :: int16
 | int32                    ::  :: int32
 | int64                    ::  :: int64

tau {{ tex \tau }} :: '' ::=                    {{ com Type expressions }}
 | b                        ::  :: base
 | b [ e ]                  ::  :: array
 | struct { D ;; V }        ::  :: struct

exp, e :: '' ::=                                {{ com Expressions }}
 | integer_literal          ::  :: integer
 | x                        ::  :: field_ref
 | e1 + e2                  ::  :: addition
 | e1 - e2                  ::  :: subtraction
 | e1 * e2                  ::  :: multiplication
 | e1 / e2                  ::  :: division
 | ( e )                    ::  :: grouping
 | sizeof e                 ::  :: sizeof
 | num_set_bits e           ::  :: num_set_bits

D :: '' ::=                                     {{ com Declarations }}
 |                          ::  :: nil_decl
 | F ; D                    ::  :: cons_decl

F :: '' ::=                                     {{ com Labeled Fields }}
 | align e                       ::  :: alignment
 | x : tau                       ::  :: field
 | x : classify (exp) { cases }  ::  :: classify
 | x : array (exp) { D ;; V }    ::  :: struct_array

cases :: '' ::=                                 {{ com Classification trees }}
 |                          ::  :: nil_case
 | case cases               ::  :: cons_case

case, c :: '' ::=                               {{ com Classification cases }}
 | exp : name -> { D ;; V } ::  :: case

V :: '' ::=                                     {{ com Value specifications }}
 | x : value_exp            ::  :: value_exp

value_exp :: '' ::=                             {{ com Value expressions }}
 | e                        ::  :: expr
 | path                     ::  :: qualified_field

path, p :: '' ::=                               {{ com Path expressions }}
 | x                        ::  :: path_root
 | path . x                 ::  :: dot_path

E :: '' ::=                                     {{ com Typing contexts }}
 |                          ::  :: env_nil
 | E ; x : tau              ::  :: env_cons
 | E1 ; x : tau ; E2        ::  :: env_append

terminals :: '' ::=                             {{ com Syntax terminals }}
 | ->                       ::  :: rarrow       {{ tex \rightarrow }}
 | |-                       ::  :: vdash        {{ tex \vdash }}

align_expr, a :: '' ::=                         {{ com Alignment expressions }}
 | current_alignment        ::  :: align_var
 | integer_literal          ::  :: align_const
 | a1 + a2                  ::  :: align_plus
 | ( a )                    ::  :: align_group
 | exp * a                  ::  :: align_multiple


formula :: formula_ ::=
 | judgement                ::  :: judgement
 | x not in BV ( E )        ::  :: notinBV              {{ tex [[x]]\not\in BV([[E]]) }}
 | a                        ::  :: current_alignment

defns
Type_checked_parsing :: '' ::=

defn

E , a |- tau : K , a'      ::  :: kinded_type :: '' by

-------------------------- :: typed_bit
E , a |- bit : T , (a + 1)

-------------------------- :: typed_byte
E , a |- byte : T , (a + 8)

-------------------------- :: typed_int16
E , a |- int16 : T , (a + 16)

-------------------------- :: typed_int32
E , a |- int32 : T , (a + 32)

-------------------------- :: typed_int64
E , a |- int64 : T , (a + 64)



